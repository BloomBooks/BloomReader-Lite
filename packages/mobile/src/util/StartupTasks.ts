import { Asset } from "expo-asset";
import * as FileSystem from "expo-file-system";
import { Locations } from "../constants/Locations";
import { copyAssetAsync, ensureFolderAsync } from "./FileUtil";
import { webBundleAssets } from "../autogenerated/WebBundleAssets";
import { Path } from "./Path";

export default async function startupTasks(): Promise<void> {
    console.info("startupTasks(): starting.");

    await Promise.all([loadWebBundleAsync(), loadSampleBooksAsync()]);

    console.info("startupTasks(): done.");
}

async function loadWebBundleAsync() {
    // Clearing the folder is optional in production,
    // but useful in development to ensure we're starting from a clean folder.
    await FileSystem.deleteAsync(Locations.WebRootFolder, {
        idempotent: true,
    });
    await ensureFolderAsync(Locations.WebRootFolder);
    const copyPromises = webBundleAssets.map((asset) => {
        // Precondition: Right now we assume that the web bundle generates all its files in a single flat folder
        // (That is, no subfolders). This assumption simplifies the code here.
        const extension = asset.type === "jsAsset" ? "js" : asset.type;
        const destination = `${Locations.WebRootFolder}/${asset.name}.${extension}`;
        console.log({ destination });

        return copyAssetAsync({
            asset,
            to: destination,
        });
    });

    // ENHANCE: catch if Promise.all rejects.
    await Promise.all(copyPromises);
}

async function loadSampleBooksAsync() {
    // Clearing the folder is optional in production,
    // but useful in development to ensure we're starting from a clean folder.
    await FileSystem.deleteAsync(Locations.BooksFolder, {
        idempotent: true,
    });
    await ensureFolderAsync(Locations.BooksFolder);

    // This is just some exploratory code.
    // It needs to be replaced with the real implementation later.
    const asset = Asset.fromModule(require("../../assets/BloomIcon.png"));
    const to = Path.join(Locations.BooksFolder, "BloomIcon.png");
    await copyAssetAsync({
        asset,
        to,
    });
    console.log("copied BloomIcon.png to: " + to);
}
